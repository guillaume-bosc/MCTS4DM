### Parameters file for MCTS4SD ###

# How to fill this file: 
# Respect this formating: 
# <ParamName><Space>=<Space><ParamValue>
# For example:
# attrFile = dataBenchmark/BreastCancer/properties.csv


## Dataset ##
# Attributes file: the value is the absolute path or the relative path to the attributes file
attrFile = dataBenchmark/BreastCancer/properties.csv

# Target labels file: the value is the absolute path or the relative path to the targets file
targetFile = dataBenchmark/BreastCancer/qualities.csv

# Attributes type: the type of attributes in [ Numeric | Boolean | Nominal | Sequence | Graph ]
attrType = Numeric


## Results folder ##
# Specify the name of the result folder that will contain the results (results are put in xp/<resultFolderName>/ResXP<TimeStamp>/)
resultFolderName = BreastCancer

## General parameters ##
# Minimum support threshold: the value is strictly positive integer
minSupp = 10

# Number of iterations: the value is strictly positive integer
nbIter = 10000

# Maximum number of output patterns for each target: the value is strictly positive integer
maxOutput = 50

# Maximum redundancy threshold: the value is a float in [0, 3] (3 not considers redundant subgroup whereas 0 considers all couples of subgroups as redundant)
maxRedundancy = 1.4

# Maximum description size: the value is a positive integer, 0 means no limit.
maxLength = 5


## Measure to quantify subgroups ##
# The measure to use: the value is in [ WRAcc | F1 | WKL | FBeta ]
measure = WRAcc

# If the FBeta is chosen (ignored otherwise), specify the xBeta and lBeta value: the values are positive integers
xBeta = 100
lBeta = 70


## MCTS Policies ##
# The Select policy #
# The UCB policy is in [ UCB1 | UCT | UCBSP | UCBTuned | DFSUCT]
UCB = UCBSP

# The Expand policy #
# The refinement operator is in [ Direct | Generator | TunedGenerator]
refineExpand = TunedGenerator

# Taking into account duplicates in [ None | AMAF | Order ]
duplicatesExpand = AMAF

# The Roll Out policy #
# The path constraint is an integer value: k>=0 for a fixed path length drawn in [0, k], -1 for a path until a terminal node
pathLength = -1

# The refinement operator for the roll out is in [ Direct | Large ] only if pathLength = -1 (ignored otherwise)
refineRollOut = Large

# The jumping value if refineRollOut = Large is an Integer >0, ignored for other reineRollOut values
jumpingLarge = 10

# The reward policy based on the path is in [ Terminal | RandomPick | MeanPath | MaxPath | MeanTopK ]
rewardPolicy = MaxPath

# The K value for a MeanTopK reward policy is an Integer > 0 (ignored for other reward policies)
topKRollOut = 3

# The Memory policy #
# The Memory policy to keep simulated solutions is in [ None | AllEvaluated | TopK ]
memoryPolicy = TopK

# If the TopK memory policy is chosen, the value of K is an Integer > 0 (ignored for other memory policies)
topKMemory = 1

# The Update policy #
# The Update policy: the value is in [ Mean | Max | MeanTopK ]
updatePolicy = Max

# The K value for a MeanTopK update policy is an Integer >0 (ignored for other update policies)
topKUpdate = 10